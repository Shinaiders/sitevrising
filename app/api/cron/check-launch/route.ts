import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

export async function GET(request: NextRequest) {
  try {
    console.log("‚è∞ [CRON] Verificando se √© hora de lan√ßar o servidor...");

    // Verificar se h√° inscritos para notificar
    const subscribersCount = await prisma.notificationSubscriber.count({
      where: {
        isNotified: false,
      },
    });

    if (subscribersCount === 0) {
      console.log("‚ÑπÔ∏è [CRON] Nenhum inscrito encontrado para notificar");
      return NextResponse.json({
        message: "Nenhum inscrito encontrado",
        checked: true,
        launched: false,
        timestamp: new Date().toISOString(),
      });
    }

    // Aqui voc√™ pode adicionar l√≥gica para verificar se √© hora de lan√ßar
    // Por exemplo: verificar uma data/hora espec√≠fica ou um flag no banco

    // Para teste, vamos simular que √© sempre hora de lan√ßar se h√° inscritos
    const shouldLaunch = true; // Substitua por sua l√≥gica

    if (!shouldLaunch) {
      console.log("‚è≥ [CRON] Ainda n√£o √© hora de lan√ßar");
      return NextResponse.json({
        message: "Ainda n√£o √© hora de lan√ßar",
        checked: true,
        launched: false,
        subscribersCount,
        timestamp: new Date().toISOString(),
      });
    }

    console.log(
      `üöÄ [CRON] Hora de lan√ßar! Enviando para ${subscribersCount} inscritos...`
    );

    // Buscar todos os inscritos n√£o notificados
    const subscribers = await prisma.notificationSubscriber.findMany({
      where: {
        isNotified: false,
      },
    });

    // Enviar notifica√ß√µes
    const results = await Promise.allSettled(
      subscribers.map(async (subscriber) => {
        const launchMessage = `üéÆ Ol√° ${subscriber.name}! 

üöÄ O UMBRELLIX V Rising ACABOU DE SER LAN√áADO!

‚öîÔ∏è Servidores dispon√≠veis AGORA:
‚Ä¢ üî• UMBRELLIX PVP - Dificuldade Brutal
‚Ä¢ üõ°Ô∏è UMBRELLIX PVE - Dificuldade Brutal

üéØ Entre no Discord para mais informa√ß√µes:
https://discord.gg/tNZDmgB6Cz

‚ö° N√£o perca tempo! Os melhores territ√≥rios ser√£o ocupados rapidamente!

Nos vemos no jogo! ü¶áüè∞`;

        try {
          console.log(
            `üì± [CRON] Enviando para ${subscriber.name} (${subscriber.whatsapp})`
          );

          // Aqui voc√™ pode integrar com sua API de WhatsApp
          // Por enquanto, vamos simular o envio
          const url = `${process.env.EVOLUTION_API_URL}/message/sendText/${process.env.EVOLUTION_INSTANCE}`;

          await fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              apikey: process.env.EVOLUTION_API_KEY || "",
            },
            body: JSON.stringify({
              number: subscriber.whatsapp,
              text: launchMessage,
            }),
          });
          await new Promise((resolve) => setTimeout(resolve, 100));

          // Marcar como notificado
          await prisma.notificationSubscriber.update({
            where: { id: subscriber.id },
            data: { isNotified: true },
          });

          console.log(`‚úÖ [CRON] Notifica√ß√£o enviada para ${subscriber.name}`);

          return {
            success: true,
            subscriber: subscriber.name,
            whatsapp: subscriber.whatsapp,
          };
        } catch (error) {
          console.error(
            `‚ùå [CRON] Erro ao enviar para ${subscriber.name}:`,
            error
          );
          throw error;
        }
      })
    );

    const successful = results.filter(
      (result) => result.status === "fulfilled"
    ).length;
    const failed = results.filter(
      (result) => result.status === "rejected"
    ).length;

    console.log(
      `‚úÖ [CRON] Processo conclu√≠do: ${successful} sucessos, ${failed} falhas`
    );

    return NextResponse.json({
      message: "Notifica√ß√µes enviadas com sucesso!",
      checked: true,
      launched: true,
      total: subscribers.length,
      successful,
      failed,
      timestamp: new Date().toISOString(),
    });
  } catch (error) {
    console.error("üí• [CRON] Erro cr√≠tico:", error);
    return NextResponse.json(
      {
        message: "Erro interno do servidor",
        checked: true,
        launched: false,
        error: error instanceof Error ? error.message : "Erro desconhecido",
        timestamp: new Date().toISOString(),
      },
      { status: 500 }
    );
  }
}

// Permitir POST tamb√©m para testes manuais
export async function POST(request: NextRequest) {
  return GET(request);
}
